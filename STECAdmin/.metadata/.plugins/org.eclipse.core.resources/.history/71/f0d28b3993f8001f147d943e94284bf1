CALL pr_create_if_not_exists(
'CREATE TABLE				stec_role    
 (																' ||
'	stec_role_id			INT	        		NOT NULL,		' ||
'	name					VARCHAR2(64 CHAR)	NOT NULL,		' ||
'	master_stec_role_id		INT	        		DEFAULT NULL,	' ||
'	stec_accessor_id		INT        			NOT NULL,		' ||  -- #	ИН Аксессора,					IdAccessor,			,		false,					true
'	CONSTRAINT uq_stec_role_name UNIQUE (name),					' ||
'	CONSTRAINT fk_stec_role_master_id
	FOREIGN KEY (master_stec_role_id) 	REFERENCES stec_role		(stec_role_id),	' ||
'	CONSTRAINT fk_stec_role_acc_id
	FOREIGN KEY (stec_accessor_id) 		REFERENCES stec_accessor	(stec_accessor_id),	' ||
'	CONSTRAINT pk_stec_role_id     
	PRIMARY KEY ( stec_role_id ) 
	ENABLE                     
 )											' 
);

-- CALL pr_drop_if_exists ('DROP SEQUENCE sq_stec_role_i ');
CALL pr_create_if_not_exists('CREATE SEQUENCE sq_stec_role_i START WITH 1 INCREMENT BY 1 NOMAXVALUE ');

CREATE OR REPLACE TRIGGER tr_stec_role_biud 
BEFORE INSERT OR UPDATE OR DELETE ON stec_role
FOR EACH ROW
DECLARE
	m_tp_id stec_accessor_type.stec_accessor_type_id%TYPE;
BEGIN
	IF ( NOT (SYS.pkg_stec.fn_my_caller IN ( '<package body ' || fn_stec_schema || '.PKG_STEC_ACCESS>')) )  THEN 
		RAISE_APPLICATION_ERROR(-20011, 'Cannot insert/update/delete directly'); 
	END IF;
	
	IF    INSERTING THEN

		IF 'SYS' <> USER THEN
			SELECT COUNT(*) INTO m_cnt
				FROM division_access DA, stec_role SR, stec_role_user SRU
				WHERE 	SRU.stec_user_id			= fn_stec_user_id			AND
						SRU.stec_role_id			= :NEW.master_stec_role_id	AND
						SRU.stec_role_id			= SR.stec_role_id			AND
						DA.stec_accessor_id			= SR.stec_accessor_id		AND
						DA.is_grantable				= 'Y';
			IF m_cnt < 1 THEN
				RAISE_APPLICATION_ERROR(-20011, 'You must point manually one of your roles with a grantable access as a master role ');
			END IF;
		ELSIF 'SYS' = USER AND NOT :NEW.master_stec_role_id IS NULL THEN
			RAISE_APPLICATION_ERROR(-20011, 'You can only create roles with the NULL master');
		END IF;

		SELECT SAT.stec_accessor_type_id 	INTO m_tp_id FROM stec_accessor_type SAT
											WHERE SAT.constant = 'SAT_ROLE';
		INSERT INTO stec_accessor(stec_accessor_id, 		stec_accessor_type_id) 
		VALUES					 (:NEW.stec_accessor_id,	m_tp_id);
		IF :NEW.stec_accessor_id IS NULL THEN
			SELECT sq_stec_accessor_i.CURRVAL INTO :NEW.stec_accessor_id FROM DUAL;
		END IF;

		IF :NEW.stec_role_id IS NULL THEN
			SELECT sq_stec_role_i.NEXTVAL INTO :NEW.stec_role_id FROM DUAL;
		END IF;
		
	ELSIF UPDATING THEN

		IF (:OLD.stec_role_id		<> :NEW.stec_role_id OR
			:OLD.stec_accessor_id 	<> :NEW.stec_accessor_id) THEN
			RAISE_APPLICATION_ERROR(-20011, 'You cannot change stec_role_id and stec_accessor_id');
		END IF;

		IF NOT pkg_stec_access.fn_i_am_master_of_role(:OLD.stec_role_id) THEN
			RAISE_APPLICATION_ERROR(-20003, 'You have no rights to update the record with stec_role_id = ' || :OLD.stec_role_id);
		END IF;

--			IF ('SYS'<>USER AND fn_stec_schema<>USER) THEN
			IF 	(in_master_stec_role_id_old <> in_master_stec_role_id_new)	THEN
					
				-- we can change master of the role only if it has no slave accessors
				SELECT COUNT(*) INTO m_cnt
					FROM division_access DA, stec_role SR
					WHERE 	in_master_stec_role_id_old	= SR.stec_role_id		AND
							DA.stec_accessor_id			= SR.stec_accessor_id;
				IF m_cnt > 0 THEN
					RAISE_APPLICATION_ERROR(-20207, 'You cannot change master_stec_role_id of the role as it has slave accessors');
				END IF;
					
				-- new master should have grantable privileges
				SELECT COUNT(*) INTO m_cnt
					FROM division_access DA, stec_role SR
					WHERE 	in_master_stec_role_id_new	= SR.stec_role_id		AND
							DA.stec_accessor_id			= SR.stec_accessor_id	AND
							DA.is_grantable				= 'Y';
				IF m_cnt < 1 THEN
					RAISE_APPLICATION_ERROR(-20207, 'You cannot change master_stec_role_id of the role as new master has no grantable privileges');
				END IF;
					
			END IF;
--			END IF;
			
		
	ELSIF DELETING THEN
	
		DELETE FROM stec_accessor SA WHERE SA.stec_accessor_id = :OLD.stec_accessor_id;
		
	END IF;

END;
/


--	CREATE OR REPLACE TRIGGER tr_stec_role_bi 
--	BEFORE INSERT ON stec_role
--	FOR EACH ROW
--	DECLARE
--		m_tp_id		stec_accessor_type.stec_accessor_type_id%TYPE;
--		m_usr_id	stec_user.stec_user_id%TYPE := fn_stec_user_id;
--		m_cnt	INT :=0;
--	
--	BEGIN
--		IF ('SYS'<>USER AND fn_stec_schema<>USER) THEN
--	
--			SELECT COUNT(DISTINCT SR.stec_role_id) INTO m_cnt
--				FROM division_access DA, stec_role SR, stec_role_user SRU
--				WHERE 	SRU.stec_user_id		= m_usr_id					AND
--						SRU.stec_role_id		= SR.stec_role_id			AND
--						DA.stec_accessor_id		= SR.stec_accessor_id		AND
--						DA.is_grantable			= 'Y';
--			IF 1 = m_cnt THEN
--				SELECT DISTINCT SR.stec_role_id INTO :NEW.master_stec_role_id
--					FROM division_access DA, stec_role SR, stec_role_user SRU
--					WHERE 	SRU.stec_user_id		= m_usr_id					AND
--							SRU.stec_role_id		= SR.stec_role_id			AND
--							DA.stec_accessor_id		= SR.stec_accessor_id		AND
--							DA.is_grantable			= 'Y';
--			ELSE 
--				IF 1 < m_cnt THEN
--					SELECT COUNT(*) INTO m_cnt
--						FROM division_access DA, stec_role SR, stec_role_user SRU
--						WHERE 	SRU.stec_user_id			= m_usr_id					AND
--								SRU.stec_role_id			= SR.stec_role_id			AND
--								:NEW.master_stec_role_id	= SR.stec_role_id			AND
--								DA.stec_accessor_id			= SR.stec_accessor_id		AND
--								DA.is_grantable				= 'Y';
--					IF m_cnt < 0 THEN
--						RAISE_APPLICATION_ERROR(-20207, 'You must point manually one of your roles with a grantable access as a master role ');
--					END IF;
--				ELSE
--					RAISE_APPLICATION_ERROR(-20207, 'You cannot create a role as you have no grantable privileges ');
--				END IF;
--			END IF;
--		END IF;
--		
--		SELECT SAT.stec_accessor_type_id 	INTO m_tp_id FROM stec_accessor_type SAT
--											WHERE SAT.constant = 'SAT_ROLE';
--		INSERT INTO stec_accessor(stec_accessor_id, stec_accessor_type_id) 
--		VALUES					 (NULL,				m_tp_id);
--		SELECT sq_stec_accessor_i.CURRVAL INTO :NEW.stec_accessor_id FROM DUAL;
--		
--		
--		
--		SELECT sq_stec_role_i.NEXTVAL INTO :NEW.stec_role_id FROM DUAL;
--		pkg_stec_account.pr_ora_role_create('SR' || fn_stec_schema_num || '_' || :NEW.stec_role_id);
--	END;
--	/
--	--	SELECT * FROM SCOTT.emp;
--	
--	--	SELECT COUNT(*) FROM DUAL WHERE 
--	--	7566 IN (
--	--	select  
--	--	--  ename || '(' || deptno || ')'  ename, 
--	--	  empno
--	--	   FROM SCOTT.emp 
--	--	   start with empno =7566
--	--	   --is NULL
--	--	   connect by prior  
--	--	   mgr = empno
--	--	   -- empno = mgr
--	--	);
--	
--	CREATE OR REPLACE TRIGGER tr_stec_role_bu 
--	BEFORE UPDATE ON stec_role
--	FOR EACH ROW
--	DECLARE 
--	--	m_master_id	stec_role.stec_role_id%TYPE;
--		m_cnt INT :=0;
--	BEGIN
--		IF pkg_stec_account.fn_i_am_master_of_role(:OLD.stec_role_id) THEN
--			IF (:OLD.stec_accessor_id 	<> :NEW.stec_accessor_id OR
--				:OLD.stec_role_id 		<> :NEW.stec_role_id	 	) THEN
--				RAISE_APPLICATION_ERROR(-20207, 'You cannot change stec_accessor_id or stec_role_id');
--			END IF;
--			IF ('SYS'<>USER AND fn_stec_schema<>USER) THEN
--				IF 	(NOT :OLD.master_stec_role_id IS NULL) 					AND 
--					(:OLD.master_stec_role_id <> :NEW.master_stec_role_id)		THEN
--					
--					-- we can change master of the role only if it has no slave accessors
--					SELECT COUNT(*) INTO m_cnt
--						FROM division_access DA, stec_role SR
--						WHERE 	:OLD.master_stec_role_id	= SR.stec_role_id		AND
--								DA.stec_accessor_id			= SR.stec_accessor_id;
--					IF m_cnt > 0 THEN
--						RAISE_APPLICATION_ERROR(-20207, 'You cannot change master_stec_role_id of the role as it has slaves');
--					END IF;
--					
--					-- new master should have grantable privileges
--					SELECT COUNT(*) INTO m_cnt
--						FROM division_access DA, stec_role SR
--						WHERE 	:NEW.master_stec_role_id	= SR.stec_role_id		AND
--								DA.stec_accessor_id			= SR.stec_accessor_id	AND
--								DA.is_grantable				= 'Y';
--					IF m_cnt < 1 THEN
--						RAISE_APPLICATION_ERROR(-20207, 'You cannot change master_stec_role_id of the role as new master has no grantable privileges');
--					END IF;
--					
--				END IF;
--			END IF;
--			RETURN;
--		ELSE
--			RAISE_APPLICATION_ERROR(-20207, 'You have no rights to update this record');
--		END IF;
--	END;
--	/
--	
--	
--	CREATE OR REPLACE TRIGGER tr_stec_role_bd 
--	BEFORE DELETE ON stec_role
--	FOR EACH ROW
--	DECLARE 
--		m_cnt INT :=0;
--	BEGIN
--		IF pkg_stec_account.fn_i_am_master_of_role(:OLD.stec_role_id) THEN
--			-- we can change master of the role only if it has no slave accessors
--			SELECT COUNT(*) INTO m_cnt
--				FROM division_access DA, stec_role SR
--				WHERE 	:OLD.master_stec_role_id	= SR.stec_role_id		AND
--						DA.stec_accessor_id			= SR.stec_accessor_id;
--			IF m_cnt > 0 THEN
--				RAISE_APPLICATION_ERROR(-20207, 'You cannot delete role as it has slaves');
--			END IF;
--	
--			DELETE 	FROM stec_accessor SA 
--					WHERE SA.stec_accessor_id = :OLD.stec_accessor_id;
--			pkg_stec_account.pr_ora_role_drop('SR' || fn_stec_schema_num || '_' || :OLD.stec_role_id);
--			RETURN;
--		ELSE
--			RAISE_APPLICATION_ERROR(-20207, 'You have no rights to delete this role (you must be a master of the role)');
--		END IF;
--	END;
--	/
