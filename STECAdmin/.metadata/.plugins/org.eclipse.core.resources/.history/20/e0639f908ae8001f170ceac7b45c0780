CALL pr_create_if_not_exists(
'CREATE TABLE				stec_role_accessor    
 (																	' ||
'	stec_role_accessor_id		INT	        		NOT NULL,		' ||
'	stec_accessor_role_id		INT	        		NOT NULL,		' ||
'	stec_accessor_id			INT	        		NOT NULL,		' ||
'	stec_accessor_type			CHAR(1 BYTE)   		NOT NULL,		' ||
'	grnt						CHAR(1 BYTE)   		NOT NULL,		' ||
'	grantor_id					INT			   		DEFAULT NULL,	' ||
'	CONSTRAINT ck_stec_role_accessor_grnt	CHECK	(grnt			IN (''Y'', ''N'')),			' ||
'	CONSTRAINT ck_stec_role_accessor_type	CHECK	(grnt			IN (''U'', ''R'')),			' ||
'	CONSTRAINT uq_stec_role_accessor UNIQUE (stec_role_id, stec_accessor_id),	' ||
'	CONSTRAINT fk_stec_role_accessor_rl
	FOREIGN KEY (stec_accessor_role_id) REFERENCES stec_role (stec_accessor_id),	' ||
'	CONSTRAINT fk_stec_role_accessor_ac
	FOREIGN KEY (stec_accessor_id) REFERENCES stec_accessor (stec_accessor_id),		' ||
'	CONSTRAINT fk_stec_role_accessor_gr
	FOREIGN KEY (grantor_id) REFERENCES stec_user (stec_user_id),		' ||
'	CONSTRAINT pk_stec_role_accessor_id     
	PRIMARY KEY ( stec_role_accessor_id ) 
	ENABLE                     
 )											' 
);
CALL pr_autoincrement_add_to('stec_role_accessor');

-- CALL pr_create_tr_check_bid('stec_role_accessor', ' SYS.pkg_stec.fn_my_caller in ( ''<package body '' || fn_stec_schema || ''.PKG_STEC_ACCOUNT>'') ' );

CREATE OR REPLACE TRIGGER tr_stec_role_accessor_bi 
BEFORE INSERT ON stec_role_accessor
FOR EACH ROW
DECLARE 
	m_cnt 		INT :=0;
	m_role_id 	INT;
	m_schema	INT := fn_stec_schema_num;
	m_login		stec_login.login%TYPE;
BEGIN
	IF ('SYS' <> USER) THEN
		SELECT pkg_stec_account.fn_stec_user_id INTO :NEW.grantor_id FROM DUAL;
	END IF;
	
	SELECT COUNT(*) INTO m_cnt FROM stec_acessor SA
					WHERE 	ROWNUM <=1 AND
							SA.stec_accessor_id   = :NEW.stec_accessor_id AND
							SA.stec_accessor_type = 'U';
	IF (m_cnt < 1) THEN 
		-- ok, accessor is is a ROLE (as it is not a user) 
		SELECT 'R' INTO :NEW.stec_accessor_type FROM DUAL;								
		SELECT SR.stec_role_id 	INTO m_role_id FROM stec_role
								WHERE :NEW.stec_accessor_id=SR.stec_accessor_id;
		pkg_stec_account.pr_ora_grant(
			'GRANT 	RL' || m_schema || '_' || :NEW.stec_role_id || ' ' ||
			'TO		RL' || m_schema || '_' || m_role_id	|| ' ' ||
			(CASE WHEN :NEW.grnt='Y' THEN 'WITH ADMIN OPTION' ELSE ' ' END)
			);
	ELSE	
		-- so, accessor is a USER, we need to grant him the role (IF HE HAS NO ROLES AT ALL)
		SELECT COUNT(*) INTO m_cnt FROM stec_role_accessor SRA
						WHERE 	ROWNUM <=1 AND
								SRA.stec_accessor_id = :NEW.stec_accessor_id;
		IF m_cnt > 0 THEN
			RAISE_APPLICATION_ERROR(-20101, 'This user has already had a role');			
		END IF;
		SELECT 'U' INTO :NEW.stec_accessor_type FROM DUAL;								
		
		SELECT SL.login	INTO m_login FROM stec_user SU, stec_login SL
						WHERE	SU.stec_accessor_id	= :NEW.stec_accessor_id AND
								SL.stec_user_id		= SU.stec_user_id;
		 
		pkg_stec_account.pr_ora_grant(
				'GRANT 	RL' || m_schema || '_' || :NEW.stec_role_id || ' ' ||
				'TO		  ' || m_login || ' ' ||
				(CASE WHEN :NEW.grnt='Y' THEN 'WITH ADMIN OPTION' ELSE ' ' END)
				);
	END IF;
	
END;
/

CREATE OR REPLACE TRIGGER tr_stec_role_accessor_bu 
BEFORE UPDATE ON stec_role_accessor
FOR EACH ROW
DECLARE 
	m_cnt 		INT :=0;
	m_role_id 	INT;
	m_schema	INT := fn_stec_schema_num;
	m_login		stec_login.login%TYPE;
BEGIN
	IF (('SYS' <> USER) AND
		(:OLD.grantor_id <> pkg_stec_account.fn_stec_user_id ) THEN
		RAISE_APPLICATION_ERROR(-20101, 'You have no rights to update this record');		
	END IF;

-- REVOKE OLD
	SELECT COUNT(*) INTO m_cnt FROM stec_acessor SA
					WHERE 	ROWNUM <=1 AND
							SA.stec_accessor_id   = :OLD.stec_accessor_id AND
							SA.stec_accessor_type = 'U';
	IF (m_cnt < 1) THEN 
		-- ok, accessor is is a ROLE (as it is not a user) 
		-- SELECT 'N' INTO :NEW.grnt FROM DUAL;								
		SELECT SR.stec_role_id 	INTO m_role_id FROM stec_role
								WHERE :OLD.stec_accessor_id=SR.stec_accessor_id;
		pkg_stec_account.pr_ora_grant(
			'REVOKE	RL' || m_schema || '_' || :OLD.stec_role_id || ' ' || 
			'FROM	RL' || m_schema || '_' || m_role_id				);
	ELSE	
		-- so, accessor is a USER, we need to grant him the role
		SELECT SL.login	INTO m_login FROM stec_user SU, stec_login SL
						WHERE	SU.stec_accessor_id	= :OLD.stec_accessor_id AND
								SL.stec_user_id		= SU.stec_user_id;
		 
		pkg_stec_account.pr_ora_grant(
				'REVOKE	RL' || m_schema || '_' || :OLD.stec_role_id || ' ' ||
				'FROM	  ' || m_login											);
	END IF;

-- GRANT NEW
	SELECT COUNT(*) INTO m_cnt FROM stec_acessor SA
					WHERE 	ROWNUM <=1 AND
							SA.stec_accessor_id   = :NEW.stec_accessor_id AND
							SA.stec_accessor_type = 'U';
	IF (m_cnt < 1) THEN 
		-- ok, accessor is is a ROLE (as it is not a user) 
		SELECT 'R' INTO :NEW.stec_accessor_type FROM DUAL;								
		SELECT SR.stec_role_id 	INTO m_role_id FROM stec_role
								WHERE :NEW.stec_accessor_id=SR.stec_accessor_id;
		pkg_stec_account.pr_ora_grant(
			'GRANT 	RL' || m_schema || '_' || :NEW.stec_role_id || ' ' ||
			'TO		RL' || m_schema || '_' || m_role_id	|| ' ' ||
			(CASE WHEN :NEW.grnt='Y' THEN 'WITH ADMIN OPTION' ELSE ' ' END)
			);
	ELSE
		-- so, accessor is a USER, we need to grant him the role (IF HE HAS NO ROLES AT ALL)
		IF :OLD.stec_accessor_id<>:NEW.stec_accessor_id THEN
			SELECT COUNT(*) INTO m_cnt FROM stec_role_accessor SRA
							WHERE 	ROWNUM <=1 AND
									SRA.stec_accessor_id = :NEW.stec_accessor_id;
			IF m_cnt > 0 THEN
				RAISE_APPLICATION_ERROR(-20101, 'This user has already had a role');			
			END IF;
		END IF;
		SELECT 'U' INTO :NEW.stec_accessor_type FROM DUAL;								
		
		SELECT SL.login	INTO m_login FROM stec_user SU, stec_login SL
						WHERE	SU.stec_accessor_id	= :NEW.stec_accessor_id AND
								SL.stec_user_id		= SU.stec_user_id;
		 
		pkg_stec_account.pr_ora_grant(
				'GRANT 	RL' || m_schema || '_' || :NEW.stec_role_id || ' ' ||
				'TO		  ' || m_login || ' ' ||
				(CASE WHEN :NEW.grnt='Y' THEN 'WITH ADMIN OPTION' ELSE ' ' END)
				);
	END IF;
	
END;
/


CREATE OR REPLACE TRIGGER tr_stec_role_accessor_bd 
BEFORE DELETE ON stec_role_accessor
FOR EACH ROW
DECLARE 
	m_cnt 		INT :=0;
	m_role_id 	INT;
	m_schema	INT := fn_stec_schema_num;
	m_login		stec_login.login%TYPE;
BEGIN
	IF (('SYS' <> USER) AND
		(:OLD.grantor_id <> pkg_stec_account.fn_stec_user_id ) THEN
		RAISE_APPLICATION_ERROR(-20101, 'You have no rights to delete this record');		
	END IF;
	SELECT COUNT(*) INTO m_cnt FROM stec_acessor SA
					WHERE 	ROWNUM <=1 AND
							SA.stec_accessor_id   = :OLD.stec_accessor_id AND
							SA.stec_accessor_type = 'U';
	IF (m_cnt < 1) THEN 
		-- ok, accessor is is a ROLE (as it is not a user) 
		-- SELECT 'N' INTO :NEW.grnt FROM DUAL;								
		SELECT SR.stec_role_id 	INTO m_role_id FROM stec_role
								WHERE :OLD.stec_accessor_id=SR.stec_accessor_id;
		pkg_stec_account.pr_ora_grant(
			'REVOKE	RL' || m_schema || '_' || :OLD.stec_role_id || ' ' || 
			'FROM	RL' || m_schema || '_' || m_role_id				);
	ELSE
		-- so, accessor is a USER, we need to grant him the role
		SELECT SL.login	INTO m_login FROM stec_user SU, stec_login SL
						WHERE	SU.stec_accessor_id	= :OLD.stec_accessor_id AND
								SL.stec_user_id		= SU.stec_user_id;
		 
		pkg_stec_account.pr_ora_grant(
				'REVOKE	RL' || m_schema || '_' || :OLD.stec_role_id || ' ' ||
				'FROM	  ' || m_login											);
	END IF;
	
END;
/