CALL pr_create_if_not_exists(
'CREATE TABLE				obj_operation    
 (															' ||
'	obj_operation_id		INT	        		NOT NULL,	' ||
'	obj_operation_set_id	INT	        		NOT NULL,	' ||
'	object_name				VARCHAR2(30 BYTE)	NOT NULL,	' ||
'	object_type				CHAR(2 BYTE)		NOT NULL,	' ||
'	sel						CHAR(1 BYTE)   		NOT NULL,	' ||
'	ins						CHAR(1 BYTE)   		NOT NULL,	' ||
'	upd						CHAR(1 BYTE)   		NOT NULL,	' ||
'	del						CHAR(1 BYTE)   		NOT NULL,	' ||
'	exe						CHAR(1 BYTE)   		NOT NULL,	' ||
'	grnt					CHAR(1 BYTE)   		NOT NULL,	' ||
'	CONSTRAINT uq_obj_operation UNIQUE (
		obj_operation_set_id,
		object_name,
		object_type,
		sel,
		ins,
		upd,
		del,
		exe,
		grnt),			' ||
'	CONSTRAINT ck_obj_operation_type	CHECK	(object_type	IN (''TB'', ''VW'', ''FN'', ''PR'', ''PK'')),	' ||
'	CONSTRAINT ck_obj_operation_sel		CHECK	(sel			IN (''Y'', ''N'')),			' ||
'	CONSTRAINT ck_obj_operation_ins		CHECK	(ins			IN (''Y'', ''N'')),			' ||
'	CONSTRAINT ck_obj_operation_upd		CHECK	(upd			IN (''Y'', ''N'')),			' ||
'	CONSTRAINT ck_obj_operation_del		CHECK	(del			IN (''Y'', ''N'')),			' ||
'	CONSTRAINT ck_obj_operation_exe		CHECK	(exe			IN (''Y'', ''N'')),			' ||
'	CONSTRAINT ck_obj_operation_grnt	CHECK	(grnt			IN (''Y'', ''N'')),			' ||
'	CONSTRAINT fk_obj_operation_set
	FOREIGN KEY	( obj_operation_set_id )	REFERENCES obj_operation_set	(obj_operation_set_id),	' ||
'	CONSTRAINT pk_obj_operation_id     
	PRIMARY KEY ( obj_operation_id ) 
	ENABLE                     
 )											' 
);

CALL pr_autoincrement_add_to('obj_operation');



CREATE OR REPLACE TRIGGER tr_obj_operation_biu 
BEFORE INSERT OR UPDATE ON obj_operation
FOR EACH ROW
DECLARE
  me_obj_name DBA_OBJECTS.OBJECT_NAME%TYPE;
  me_obj_type DBA_OBJECTS.OBJECT_TYPE%TYPE := 
  		(CASE WHEN 'VW' = :NEW.object_type THEN 'VIEW'		ELSE
  		(CASE WHEN 'TB' = :NEW.object_type THEN 'TABLE'		ELSE
  		(CASE WHEN 'FN' = :NEW.object_type THEN 'FUNCTION'	ELSE
  		(CASE WHEN 'PR' = :NEW.object_type THEN 'PROCEDURE'	ELSE
											  	'PACKAGE'  			
  		 END) END) END) END);
BEGIN
	SELECT OBJECT_NAME 	INTO me_obj_name
						FROM DBA_OBJECTS 
   	    	  			WHERE 	fn_stec_schema		= OWNER			AND 
       	    	    			:NEW.object_name	= OBJECT_NAME	AND
           	    				me_obj_type			= OBJECT_TYPE;
-- if the NEW.object_name or NEW.object_type are incorrect, there should be an exception	
    IF(	'VW' =		:NEW.object_type OR
    	'TB' =		:NEW.object_type 		) THEN
    	IF ('Y' =	:NEW.exe) THEN
    		RAISE_APPLICATION_ERROR(-20002, 'EXECUTE is not for TABLE or VIEW');
    	END IF;
    ELSE
    	IF ('Y' = :NEW.sel OR
    		'Y' = :NEW.ins OR
    		'Y' = :NEW.upd OR
    		'Y' = :NEW.del 		) THEN
    		RAISE_APPLICATION_ERROR(-20002, 'SELECT, INSERT, UPDATE, DELETE operations are for TABLE or VIEW only');
    	END IF;
    END IF;
END;
/

INSERT 	INTO a_dangerous_object	(a_dangerous_object_id, object_name, 		object_type, 	description)
   		VALUES					(NULL,					'OBJ_OPERATION',	'TB',			'Таблица obj_operation содержит поле object_name (имя объекта БД) и object_type (таблица, функция и т.д.) - имена этих объектов в БД категорически НЕ рекомендуется изменять (иначе придётся заново регенерировать права для всех аксессоров, ссылающихся на эти права - в obj_operation)');
COMMIT;   		
-- select * from a_dangerous_object;


		