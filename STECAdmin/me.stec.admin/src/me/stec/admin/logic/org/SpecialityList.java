//*
//* DO NOT EDIT THIS FILE 
//* This file is generated from file ./../me.stec.admin/sql/table/100902_00-18_div_speciality.sql 
//* Edit that file if it is necessary and run me.stec.jet.Main for regeneration
//* (me.ste.jet -> right click -> Run As -> Java Application -> Main - me.stec.jet)
//* or create an inherent class to extend the functionality.
//*

package me.stec.admin.logic.org;

import java.math.BigDecimal;



import me.stec.admin.iface.IVal;
import me.stec.admin.logic.DbField;
import me.stec.admin.logic.AItemList;

/**
* Список Специальностей
*/
public class SpecialityList extends 
AItemList{

	@Override
	public String getDbSchemeName(){
		return "DIV_SPECIALITY";
	}
	
	@Override
	public boolean getDbSchemeReadOnly(){
		return true;
	}

	@Override
	protected String getLoadQuery() {
		return SpecialityList.sLoadQuery;
	}
	@Override
	protected String getLoadComboQuery(){
		return SpecialityList.sLoadComboQuery;
	}
	@Override
	protected String getDeleteQuery() {
		return SpecialityList.sDeleteQuery;
	}
	/**
	 * NOTE: m_def should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	protected static final SpecialityList m_def = new SpecialityList();
//	static{
//		m_def.sOrderBy = m_def.sOrderByCombo = " ORDER BY " + m_def.getId().getDbColumnName();
//	}
	
	/**
	 * NOTE: sLoadQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	protected static String sLoadQuery		= m_def.getLoadQueryString();
	/**
	 * NOTE: sLoadComboQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	protected static String sLoadComboQuery = m_def.getLoadComboQueryString();
	/**
	 * NOTE: sDeleteQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	protected static String sDeleteQuery	= m_def.getDeleteQueryString();
	
		public SpecialityList(){
			this(false,		0);
		}
		public SpecialityList(boolean bDistinct){
			this(bDistinct, 0);//0 (or negative int) means no limit
		}
		public SpecialityList(boolean bDistinct, int iLimit){
			super(new IVal[]{
				new DbField<BigDecimal, Speciality.zzzIdAttr>(null, Speciality.zzzIdAttr.getInstance()),
				new DbField<String, Speciality.zzzNameAttr>(null, Speciality.zzzNameAttr.getInstance()),
				new DbField<String, Speciality.zzzTechNameAttr>(null, Speciality.zzzTechNameAttr.getInstance()),
				new DbField<BigDecimal, Speciality.zzzIdDivisionAttr>(null, Speciality.zzzIdDivisionAttr.getInstance())
			});
			
			super.bDistinct 	= bDistinct;
			super.iLimit		= iLimit;
			
			if (null == m_def)	return;
			
			super.getListHeader().addAll(m_def.getListHeader());
			super.sOrderBy		= m_def.sOrderBy;
			super.sOrderByCombo	= m_def.sOrderByCombo;
			
		}

		@Override
		public Speciality getItemDef(){
			return Speciality.getDef();
		}
		
		@SuppressWarnings("unchecked")
		public DbField<BigDecimal, Speciality.zzzIdAttr> getId() { return (DbField<BigDecimal, Speciality.zzzIdAttr>)super.val[0]; } 
		public void setId(DbField<BigDecimal, Speciality.zzzIdAttr> value) { super.val[0].setVal(value.getVal());}
		public void setId(BigDecimal value) { super.val[0].setVal(value);}
		 
		@SuppressWarnings("unchecked")
		public DbField<String, Speciality.zzzNameAttr> getName() { return (DbField<String, Speciality.zzzNameAttr>)super.val[1]; } 
		public void setName(DbField<String, Speciality.zzzNameAttr> value) { super.val[1].setVal(value.getVal());}
		public void setName(String value) { super.val[1].setVal(value);}
		 
		@SuppressWarnings("unchecked")
		public DbField<String, Speciality.zzzTechNameAttr> getTechName() { return (DbField<String, Speciality.zzzTechNameAttr>)super.val[2]; } 
		public void setTechName(DbField<String, Speciality.zzzTechNameAttr> value) { super.val[2].setVal(value.getVal());}
		public void setTechName(String value) { super.val[2].setVal(value);}
		 
		@SuppressWarnings("unchecked")
		public DbField<BigDecimal, Speciality.zzzIdDivisionAttr> getIdDivision() { return (DbField<BigDecimal, Speciality.zzzIdDivisionAttr>)super.val[3]; } 
		public void setIdDivision(DbField<BigDecimal, Speciality.zzzIdDivisionAttr> value) { super.val[3].setVal(value.getVal());}
		public void setIdDivision(BigDecimal value) { super.val[3].setVal(value);}
		 
}
