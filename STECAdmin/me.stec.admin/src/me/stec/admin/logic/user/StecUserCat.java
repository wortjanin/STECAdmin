//*
//* DO NOT EDIT THIS FILE 
//* This file is generated from file ./../me.stec.admin/sql/table/100902_00-04_stec_user_cat.sql 
//* Edit that file if it is necessary and run me.stec.jet.Main for regeneration
//* (me.ste.jet -> right click -> Run As -> Java Application -> Main - me.stec.jet)
//* or create an inherent class to extend the functionality.
//*

package me.stec.admin.logic.user;

import java.sql.SQLException;

import java.math.BigDecimal;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;


import me.stec.admin.iface.IAttr;
import me.stec.admin.iface.IVal;
import me.stec.admin.logic.DbField;
import me.stec.admin.logic.AItem;
import me.stec.admin.db.Privs;

/**
* Категория пользователя
*/
public class StecUserCat extends 
AItem{
	@Override
	public String getDbSchemeName(){
		return "STEC_USER_CAT";
	}

	@Override
	public boolean getDbSchemeReadOnly(){
		return true;
	}

	@Override
	public BigDecimal getID() {
		return this.getId().getValue();
	}
	@Override
	public void setID(BigDecimal id) {
		this.getId().setValue(id);
	} 

	@Override
	public String getIdDbColumnName() {
		return this.getId().getDbColumnName();
	}

	@Override
	protected String getLoadQuery() {
		return StecUserCat.sLoadQuery;
	} 
	@Override
	protected String getInsertQuery() {
		return StecUserCat.sInsertQuery;
	} 
	@Override
	protected String getUpdateQuery() {
		return StecUserCat.sUpdateQuery;
	} 
	@Override
	protected String getDeleteQuery() {
		return StecUserCat.sDeleteQuery;
	} 
	
	protected static final BiMap<String, Integer> columnNumber = HashBiMap.create();
	@Override
	protected BiMap<String, Integer> getColumnNumber() {
		return columnNumber;
	}
	
	/**
	 * NOTE: field m_def SHOULD NEVER BE CHANGED (as well as it's state)  
	 */
	private static final StecUserCat m_def = new StecUserCat();  
	/**
	 * NOTE: sLoadQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	static{
		FillColumnData(m_def);
	}
	
	/**
	 * NOTE: sLoadQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	private static String sLoadQuery	= m_def.getLoadQueryString();
	/**
	 * NOTE: sInsertQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	private static String sInsertQuery	= m_def.getInsertQueryString();
	/**
	 * NOTE: sUpdateQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	private static String sUpdateQuery	= m_def.getUpdateQueryString();
	/**
	 * NOTE: sDeleteQuery should NEVER be changed DYNAMICALLY, 
	 * only a static context is encouraged for any change  
	 */
	private static String sDeleteQuery	= m_def.getDeleteQueryString();

	
	@Override
	public String getLastIdQuery(){
		return "SELECT sq_stec_user_cat_i.currval FROM DUAL";
	}

	private static final class Inner{
		private static boolean canSelect = false;
		private static boolean canInsert = false;
		private static boolean canUpdate = false;
		private static boolean canDelete = false;
		static{
			Privs.setup(m_def);
		}
	}

	@Override
	public void setCanSelect(boolean canSelect){
		StecUserCat.Inner.canSelect = canSelect;
	}
	@Override
	public boolean canSelect(){
		return 	StecUserCat.Inner.canSelect;
	}
	
	@Override
	public void setCanInsert(boolean canInsert){
		StecUserCat.Inner.canInsert = canInsert;
	}
	@Override
	public boolean canInsert(){
		return 	StecUserCat.Inner.canInsert;
	}

	@Override
	public void setCanUpdate(boolean canUpdate){
		StecUserCat.Inner.canUpdate = canUpdate;
	}
	@Override
	public boolean canUpdate(){
		return 	StecUserCat.Inner.canUpdate;
	}

	@Override
	public void setCanDelete(boolean canDelete){
		StecUserCat.Inner.canDelete = canDelete;
	}
	@Override
	public boolean canDelete(){
		return 	StecUserCat.Inner.canDelete;
	}
	
		
		public StecUserCat(){
			super(new IVal[]{
				new DbField<BigDecimal, zzzIdAttr>(null, zzzIdAttr.getInstance()),
				new DbField<String, zzzConstantAttr>(null, zzzConstantAttr.getInstance()),
				new DbField<String, zzzNameAttr>(null, zzzNameAttr.getInstance())
			});
		}
		public StecUserCat(BigDecimal id, boolean forUpdate)  throws SQLException {
			this();
			this.setID(id);
			load(forUpdate);
		}

		public static StecUserCat getDef(){
			return StecUserCat.m_def;
		}
		
		public static final class zzzIdAttr extends IAttr{
			private zzzIdAttr(){}
			private static final zzzIdAttr m_Instance = new zzzIdAttr();
			public static zzzIdAttr getInstance() {return m_Instance; }
			public String           getName()				{ return "Id";  }
			public String           getDbColumnName()		{ return "STEC_USER_CAT_ID"; }  
			public String           getCaption()			{ return "ИН Категории пользователя"; }  
			public boolean          getDbReadOnly()			{ return true; }  
			public boolean          getDbIsCombo()			{ return true; }  
			public boolean          getDbIsNotNull()		{ return true; }         }
		@SuppressWarnings("unchecked")
		public DbField<BigDecimal, zzzIdAttr> getId() { return (DbField<BigDecimal, zzzIdAttr>)super.val[0]; } 
		public void setId(DbField<BigDecimal, zzzIdAttr> value) { super.val[0].setVal(value.getVal());} 
		public void setId(BigDecimal value) { super.val[0].setVal(value);}
		
		
		public static final class zzzConstantAttr extends IAttr{
			private zzzConstantAttr(){}
			private static final zzzConstantAttr m_Instance = new zzzConstantAttr();
			public static zzzConstantAttr getInstance() {return m_Instance; }
			public String           getName()				{ return "Constant";  }
			public String           getDbColumnName()		{ return "CONSTANT"; }  
			public String           getCaption()			{ return "Константа"; }  
			public boolean          getDbIsCombo()			{ return true; }  
			public boolean          isString()				{ return true; }         }
		@SuppressWarnings("unchecked")
		public DbField<String, zzzConstantAttr> getConstant() { return (DbField<String, zzzConstantAttr>)super.val[1]; } 
		public void setConstant(DbField<String, zzzConstantAttr> value) { super.val[1].setVal(value.getVal());} 
		public void setConstant(String value) { super.val[1].setVal(value);}
		
		
		public static final class zzzNameAttr extends IAttr{
			private zzzNameAttr(){}
			private static final zzzNameAttr m_Instance = new zzzNameAttr();
			public static zzzNameAttr getInstance() {return m_Instance; }
			public String           getName()				{ return "Name";  }
			public String           getDbColumnName()		{ return "NAME"; }  
			public String           getCaption()			{ return "Категория"; }  
			public boolean          getDbIsCombo()			{ return true; }  
			public boolean          isString()				{ return true; }         }
		@SuppressWarnings("unchecked")
		public DbField<String, zzzNameAttr> getName() { return (DbField<String, zzzNameAttr>)super.val[2]; } 
		public void setName(DbField<String, zzzNameAttr> value) { super.val[2].setVal(value.getVal());} 
		public void setName(String value) { super.val[2].setVal(value);}
		public IVal getComboName() { return getName(); }
		
}
